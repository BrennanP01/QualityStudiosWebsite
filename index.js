if(process.env.NODE_ENV !== 'production'){
   require('dotenv').config()
}

// Used express to get the file to display
const express = require('express')
const bcrypt = require('bcrypt')
const app = express()
const passport = require('passport')
const flash = require('express-flash')
const session = require('express-session')
const methodOverride = require('method-override')

const initializePassport = require('./passport-config')
initializePassport(
   passport, 
   email => users.find(user=>user.email === email),
   id => users.find(user=>user.id === id),
)

const expressHandlebars = require('express-handlebars')
const bodyParser = require('body-parser')
const port = process.env.PORT || 3000

/* IMPORTANT: TEMPORARY FOR SETTING UP LOGIN, WILL BE REPLACED WITH DATABASE FOR INCREASE SECURITY */
const users = []

app.engine('handlebars', expressHandlebars({
    defaultLayout: 'main'
}))

app.set('view engine', 'handlebars')
// Gets the current directory, and adds the "public" file
// This will display the html in the root directory of public. (no need to put it in the views folder)
app.use(express.static(__dirname + '/public'))
app.use(express.urlencoded({ extended: false }))
app.use(bodyParser.json())
app.use(flash())
app.use(session({
   secret: process.env.SESSION_SECRET,
   resave: false,
   saveUninitialized: false
}))
app.use(passport.initialize())
app.use(passport.session())
app.use(methodOverride('_method'))

/*This will load the homepage of the Website*/
app.get('/',(req,res)=>{
   res.render('home')
})

app.get('/map',(req,res)=>{
    res.render('map')
 })

 app.get('/social',(req,res)=>{
    res.render('social')
 })

 app.get('/portfolio',(req,res)=>{
    res.render('portfolio')
 })

 app.get('/staff',(req,res)=>{
    res.render('staff')
 })

 app.get('/schedule', checkAuthenticated, (req,res)=>{
   res.render('schedule')
})

 app.get('/about',(req,res)=>{
    res.render('about')
 })

 app.get('/login', checkNotAuthenticated,(req,res)=>{
   res.render('login')
})

app.post('/login', checkNotAuthenticated, passport.authenticate('local', {
   successRedirect: '/',
   failureRedirect: '/login',
   failureFlash: true
}))

app.get('/register', checkNotAuthenticated,(req,res)=>{
   res.render('register')
})

app.post('/register', checkNotAuthenticated, async (req,res)=>{
   try{
      const hashedPassword = await bcrypt.hash(req.body.password, 10)
      users.push({
         id: Date.now().toString(), // would be generated by the database
         name: req.body.firstName,
         email: req.body.email,
         password: hashedPassword // password is hashed, and thus safe to store
      })
      res.redirect('/login')
   }catch{
      res.redirect('/register')
   }
   console.log(users)
})

app.delete('/logout', (req, res) => {
   req.logOut()
   res.redirect('/')
})

function checkAuthenticated(req, res, next) {
   if(req.isAuthenticated()){
      return next()
   }else{
      res.redirect('/login')
   }
}

function checkNotAuthenticated(req, res, next) {
   if(req.isAuthenticated()){
      return res.redirect('/')
   }else{
      next()
   }
}

app.listen(port, ()=>console.log(
    `Express started on http://localhost:${port}; ` +
    `press Ctrl-C to terminate.`
))
